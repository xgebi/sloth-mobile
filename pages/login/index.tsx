import styles from './login.page.module.css';
import Head from 'next/head'
import {inject, observer} from "mobx-react";
import React, {
  ChangeEvent,
  EventHandler, FormEvent,
  FormEventHandler,
  MouseEventHandler,
  ReactEventHandler,
  useState
} from "react";
import PageProps from "../PageProps";
import AuthenticationService from "../../services/authentication.service";
import {ErrorData, UserData} from "../../services/interfaces/AuthenticationData";
import {useRouter} from "next/router";
import RootStore from "../../store/RootStore";
import UserStore from "../../store/UserStore";


const Login: any = inject("rootStore")(
  observer((props: PageProps) => {
    const rootStore: RootStore = props.rootStore!;
    const userStore: UserStore = props.rootStore?.userStore!;
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [canLogin, setCanLogin] = useState(true);
    const router = useRouter();

    const updateUsername = (event: ChangeEvent<HTMLInputElement>) => {
      setUsername(event.target.value);
    }

    const updatePassword = (event: ChangeEvent<HTMLInputElement>) => {
      setPassword(event.target.value);
    }

    const loginUserFormSubmit = (event: FormEvent<HTMLFormElement>): void  => {
      event.preventDefault();
      loginUser();
    }

    const loginUserButton = (event: React.MouseEvent<HTMLButtonElement>): void => {
      event.preventDefault();
      loginUser();
    }

    const loginUser = async () => {
      if (password.length === 0 || username.length === 0) {
        return;
      }
      setCanLogin(false);
      const result: UserData | ErrorData = await AuthenticationService.loginUser({
        username,
        password
      });
      if (result.hasOwnProperty("error")) {
        console.log("it's an error");
      } else if ((new Date()).getMilliseconds() < (result as UserData).expiryTime) {
        userStore.logIn(result as UserData);
        router.push({
          pathname: '/',
        })
      }
      setCanLogin(true);
    }

    return (
      <div className={'login-page'}>
        <Head>
          <title>Login | { props.rootStore?.title }</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <style jsx>{`
        .login-page {
         display: grid;
         grid-template-columns: 1fr auto 1fr;
         grid-template-rows: 1fr auto 1fr;
         height: 100vh;
         background: var(--background);
         box-shadow:2px 2px #ddd;
        }
        
        .login-page > form {
          grid-column: 2 / 3;
          grid-row: 2 / 3;
          display: flex;
          flex-flow: column;
          padding: 2rem;
          background: var(--white);
          border-radius: .25rem;
          gap: .75rem;
        }
        
        .login-page > form > input {
          width: 14rem;
          padding: .25rem .5rem;
          border: 1px solid #0495ff;
          border-radius: .25rem;
        }
        
        .login-page > form > button {
          padding: .5rem 1rem;
          padding:.5rem 1rem;
          background:#0495ff;
          border:0;
          box-shadow:2px 2px #ddd;
          border-radius:.25rem;
          color: var(--white);
          font-weight: 700;

        }
      `}</style>

        <form onSubmit={loginUserFormSubmit}>
          <label htmlFor="username">Username:</label>
          <input
            id="username"
            value={username}
            onChange={updateUsername} />
          <label htmlFor='password'>Password:</label>
          <input
            id="password"
            type='password'
            value={password}
            onChange={updatePassword}
          />
          <button onClick={loginUserButton} disabled={!canLogin}>Login</button>
        </form>
      </div>
    );
  })
);

export default Login;